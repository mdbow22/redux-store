{"version":3,"sources":["utils/helpers.js","utils/redux/cartSlice.js","components/ProductItem/index.js","utils/queries.js","assets/spinner.gif","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","App.js","serviceWorker.js","utils/redux/configureStore.js","index.js"],"names":["pluralize","name","count","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","cartSlice","createSlice","initialState","products","cart","cartOpen","categories","currentCategory","reducers","updateProducts","state","action","payload","add2Cart","addMultipleToCart","updateCartQuantity","map","product","purchaseQuantity","cartRemoval","filter","length","clearCart","splice","cartToggle","updateCategories","updateCurrentCategory","actions","ProductItem","item","reduxCart","useSelector","reduxDispatch","useDispatch","image","price","quantity","className","to","alt","src","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CHECKOUT","QUERY_CATEGORIES","QUERY_USER","ProductList","useQuery","loading","data","useEffect","forEach","then","category","spinner","CategoryMenu","categoryData","id","CartItem","type","placeholder","value","onChange","target","role","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","res","redirectToCheckout","sessionId","checkout","session","a","getCart","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","configureStore","reducer","cartReducer","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6f3df2ac.chunk.js","sourcesContent":["export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n  return name + 's';\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    const request = window.indexedDB.open('shop-shop', 1);\n    let db, tx, store;\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    request.onsuccess = function(e) {\n      db = request.result;\n      tx = db.transaction(storeName, 'readwrite');\n      store = tx.objectStore(storeName);\n\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n\n      tx.oncomplete = function() {\n        db.close();\n      };\n    };\n  });\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState: {\r\n        products: [],\r\n        cart: [],\r\n        cartOpen: false,\r\n        categories: [],\r\n        currentCategory: '',\r\n    },\r\n    reducers: {\r\n        updateProducts: (state, action) => {\r\n            state.products = action.payload;\r\n        },\r\n        add2Cart: (state, action) => { \r\n            state.cartOpen = true; \r\n            state.cart = [...state.cart, action.payload];\r\n        },\r\n        addMultipleToCart: (state, action) => {\r\n            state.cart = [...state.cart, ...action.payload];\r\n        },\r\n        updateCartQuantity: (state, action) => {\r\n            state.cartOpen = true;\r\n            state.cart = state.cart.map((product) => {\r\n                if(action.payload._id === product._id) {\r\n                    product.purchaseQuantity = action.payload.purchaseQuantity;\r\n                }\r\n                return product;\r\n            })\r\n        },\r\n        cartRemoval: (state, action) => {\r\n            state.cart = state.cart.filter((product) => {\r\n                return product._id !== action.payload;\r\n            });\r\n\r\n            state.cartOpen = state.cart.length > 0;\r\n        },\r\n        clearCart: state => {\r\n            state.cartOpen = false;\r\n            state.cart.splice(0, state.cart.length);\r\n        },\r\n        cartToggle: state => {\r\n            state.cartOpen = !state.cartOpen;\r\n        },\r\n        updateCategories: (state, action) => {\r\n            state.categories = [...action.payload];\r\n        },\r\n        updateCurrentCategory: (state, action) => {\r\n            state.currentCategory = action.payload;\r\n        }\r\n    }\r\n});\r\n\r\nexport const {\r\n    updateProducts,\r\n    add2Cart,\r\n    addMultipleToCart,\r\n    updateCartQuantity,\r\n    cartRemoval,\r\n    clearCart,\r\n    cartToggle,\r\n    updateCategories,\r\n    updateCurrentCategory\r\n} = cartSlice.actions;\r\n\r\nexport default cartSlice.reducer;","import React from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\n//import { useStoreContext } from \"../../utils/GlobalState\";\n//import { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { add2Cart, updateCartQuantity } from \"../../utils/redux/cartSlice\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductItem(item) {\n  //const [state, dispatch] = useStoreContext();\n\n  //Redux stuff\n  const reduxCart = useSelector((state) => state.reduxCart);\n  const reduxDispatch = useDispatch();\n\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\n  //const { cart } = state\n\n  const addToCart = () => {\n    const itemInCart = reduxCart.cart.find((cartItem) => cartItem._id === _id)\n    console.log(itemInCart);\n    if (itemInCart) {\n      /* dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      }); */\n\n      //redux way to update cart quantity\n      reduxDispatch(updateCartQuantity({\n        _id: _id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      }));\n\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      /* dispatch({\n        type: ADD_TO_CART,\n        product: { ...item, purchaseQuantity: 1 }\n      }); */\n\n      reduxDispatch(add2Cart({...item, purchaseQuantity: 1}));\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n    }\n  }\n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/spinner.689d9a07.gif\";","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ProductItem from '../ProductItem';\n//import { useStoreContext } from '../../utils/GlobalState';\n//import { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport spinner from '../../assets/spinner.gif';\nimport { updateProducts } from '../../utils/redux/cartSlice';\n\nfunction ProductList() {\n  //const [state, dispatch] = useStoreContext();\n\n  //const { currentCategory } = state;\n\n  //redux stuff\n  const reduxCart = useSelector((state) => state.reduxCart);\n  const reduxDispatch = useDispatch();\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if (data) {\n      /* dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      }); */\n\n      reduxDispatch(updateProducts(data.products));\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    } else if (!loading) {\n      idbPromise('products', 'get').then((products) => {\n        /* dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products,\n        }); */\n\n        reduxDispatch(updateProducts(data.products));        \n      });\n    }\n  }, [data, loading]);\n\n  function filterProducts() {\n    if (!reduxCart.currentCategory) {\n      return reduxCart.products;\n    }\n\n    return reduxCart.products.filter(\n      (product) => product.category._id === reduxCart.currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {reduxCart.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useQuery } from '@apollo/client';\n//import { useStoreContext } from '../../utils/GlobalState';\n/* import {\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n} from '../../utils/actions'; */\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport { updateCategories, updateCurrentCategory } from '../../utils/redux/cartSlice';\n\nfunction CategoryMenu() {\n\n  //redux stuff\n  const reduxCart = useSelector((state) => state.reduxCart);\n  const reduxDispatch = useDispatch();\n\n  //const [state, dispatch] = useStoreContext();\n\n  //const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      /* dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      }); */\n\n      reduxDispatch(updateCategories(categoryData.categories));\n\n      categoryData.categories.forEach((category) => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then((categories) => {\n        /* dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories,\n        }); */\n\n        reduxDispatch(updateCategories(categoryData.categories));\n      });\n    }\n  }, [categoryData, loading, reduxDispatch]);\n\n  const handleClick = (id) => {\n    /* dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    }); */\n\n    reduxDispatch(updateCurrentCategory(id));\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {reduxCart.categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\n//import { useStoreContext } from \"../../utils/GlobalState\";\n//import { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useDispatch } from 'react-redux';\nimport { updateCartQuantity, cartRemoval } from '../../utils/redux/cartSlice';\n\nconst CartItem = ({ item }) => {\n\n  //const [, dispatch] = useStoreContext();\n\n  //redux stuff\n  const reduxDispatch = useDispatch();\n\n  const removeFromCart = item => {\n    /* dispatch({\n      type: REMOVE_FROM_CART,\n      _id: item._id\n    }); */\n\n    reduxDispatch(cartRemoval(item._id))\n\n    idbPromise('cart', 'delete', { ...item });\n\n  };\n\n  const onChange = (e) => {\n    const value = e.target.value;\n    if (value === '0') {\n      /* dispatch({\n        type: REMOVE_FROM_CART,\n        _id: item._id\n      }); */\n\n      reduxDispatch(cartRemoval(item._id))\n\n      idbPromise('cart', 'delete', { ...item });\n\n    } else {\n      /* dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      }); */\n\n      reduxDispatch(updateCartQuantity({\n        _id: item._id,\n        purchaseQuantity: parseInt(value)\n      }));\n\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n\n    }\n  }\n\n  return (\n    <div className=\"flex-row\">\n      <div>\n        <img\n          src={`/images/${item.image}`}\n          alt=\"\"\n        />\n      </div>\n      <div>\n        <div>{item.name}, ${item.price}</div>\n        <div>\n          <span>Qty:</span>\n          <input\n            type=\"number\"\n            placeholder=\"5\"\n            value={item.purchaseQuantity}\n            onChange={onChange}\n          />\n          <span\n            role=\"img\"\n            aria-label=\"trash\"\n            onClick={() => removeFromCart(item)}\n          >\n            🗑️\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\n//import { useStoreContext } from '../../utils/GlobalState';\n//import { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport { cartToggle, addMultipleToCart } from '../../utils/redux/cartSlice';\nimport './style.css';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  // const [state, dispatch] = useStoreContext();\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  //redux stuff\n  const reduxCart = useSelector((state) => state.reduxCart);\n  const reduxDispatch = useDispatch();\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      //dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n\n      reduxDispatch(addMultipleToCart([...cart]));\n\n    }\n\n    if (!reduxCart.cart.length) {\n      getCart();\n    }\n  }, [reduxCart.cart.length, reduxDispatch]);\n\n  function toggleCart() {\n    /* dispatch({ type: TOGGLE_CART }); */\n    reduxDispatch(cartToggle());\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    reduxCart.cart.forEach((item) => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n\n    reduxCart.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds },\n    });\n  }\n\n  if (!reduxCart.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span role=\"img\" aria-label=\"trash\">\n          🛒\n        </span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>\n        [close]\n      </div>\n      <h2>Shopping Cart</h2>\n      {reduxCart.cart.length ? (\n        <div>\n          {reduxCart.cart.map((item) => (\n            <CartItem key={item._id} item={item} />\n          ))}\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n\n            {Auth.loggedIn() ? (\n              <button onClick={submitCheckout}>Checkout</button>\n            ) : (\n              <span>(log in to check out)</span>\n            )}\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;\n","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from \"../components/Cart\";\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Cart from '../components/Cart';\n/* import { useStoreContext } from '../utils/GlobalState';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions'; */\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport { idbPromise } from '../utils/helpers';\nimport spinner from '../assets/spinner.gif';\nimport { \n  updateProducts,\n  cartRemoval,\n  add2Cart,\n  updateCartQuantity } from '../utils/redux/cartSlice';\n\nfunction Detail() {\n  //const [state, dispatch] = useStoreContext();\n  const { id } = useParams();\n\n  //redux stuff\n  const reduxCart = useSelector((state) => state.reduxCart);\n  const reduxDispatch = useDispatch();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  //const { products, cart } = state;\n\n  useEffect(() => {\n    // already in global store\n    if (reduxCart.products.length) {\n      setCurrentProduct(reduxCart.products.find((product) => product._id === id));\n    }\n    // retrieved from server\n    else if (data) {\n      /* dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      }); */\n\n      reduxDispatch(updateProducts(data.products));\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        /* dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts,\n        }); */\n\n        reduxDispatch(updateProducts(data.products));\n      });\n    }\n  }, [reduxCart.products, data, loading, reduxDispatch, id]);\n\n  const addToCart = () => {\n    const itemInCart = reduxCart.cart.find((cartItem) => cartItem._id === id);\n    if (itemInCart) {\n      /* dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      }); */\n\n      reduxDispatch(updateCartQuantity({\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      }));\n\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\n      });\n    } else {\n      /* dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 },\n      }); */\n\n      reduxDispatch(add2Cart({ ...currentProduct, purchaseQuantity: 1 }));\n\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  };\n\n  const removeFromCart = () => {\n    /* dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id,\n    }); */\n\n    reduxDispatch(cartRemoval(currentProduct._id));\n\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct && reduxCart.cart ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n              disabled={!reduxCart.cart.find((p) => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React, { useEffect } from 'react';\nimport { useMutation } from '@apollo/client';\nimport Jumbotron from '../components/Jumbotron';\nimport { ADD_ORDER } from '../utils/mutations';\nimport { idbPromise } from '../utils/helpers';\n\nfunction Success() {\n  const [addOrder] = useMutation(ADD_ORDER);\n\n  useEffect(() => {\n    async function saveOrder() {\n      const cart = await idbPromise('cart', 'get');\n      const products = cart.map((item) => item._id);\n\n      if (products.length) {\n        const { data } = await addOrder({ variables: { products } });\n        const productData = data.addOrder.products;\n\n        productData.forEach((item) => {\n          idbPromise('cart', 'delete', item);\n        });\n      }\n\n      setTimeout(() => {\n        window.location.assign('/');\n      }, 3000);\n    }\n\n    saveOrder();\n  }, [addOrder]);\n\n  return (\n    <div>\n      <Jumbotron>\n        <h1>Success!</h1>\n        <h2>Thank you for your purchase!</h2>\n        <h2>You will now be redirected to the home page</h2>\n      </Jumbotron>\n    </div>\n  );\n}\n\nexport default Success;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\n//import { StoreProvider } from './utils/GlobalState';\nimport Success from './pages/Success';\nimport OrderHistory from './pages/OrderHistory';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          {/* <StoreProvider> */}\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route component={NoMatch} />\n            </Switch>\n          {/* </StoreProvider> */}\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport cartReducer from './cartSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        reduxCart: cartReducer,\r\n    }\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './utils/redux/configureStore';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}